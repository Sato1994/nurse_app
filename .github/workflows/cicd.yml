name: CI-CD
on: [push]
jobs:
# # rails rspec #########################################################
#   rails_test:
#     runs-on: ubuntu-18.04
#     defaults:
#       run:
#         working-directory: ./api
#     env:
#       RAILS_ENV: test
#       DB_HOST: 127.0.0.1
#       API_DOMAIN: localhost
#     services:
#       db:
#         image: mysql:5.7
#         ports:
#           - 3306:3306
#         env:
#           MYSQL_ALLOW_EMPTY_PASSWORD: yes
#           BIND-ADDRESS: 0.0.0.0
#         options: >-
#           --health-cmd "mysqladmin ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#     steps:
#       - uses: actions/checkout@v2.3.4
#       - name: set up ruby
#         uses: ruby/setup-ruby@v1.68.0
#         with:
#           ruby-version: 2.7.1
#           bundler-cache: true
#       - name: cache node modules
#         uses: actions/cache@v2.1.4
#         with:
#           path: node_modules
#           key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-node-
#       - name: bundle install
#         run: |
#           gem install bundler
#           bundle install --jobs 4 --retry 3 --path vendor/bundle
#       - name: yarn install
#         run:  yarn install --check-files
#       - name: migrate db
#         run: |
#           bundle exec rails db:create
#           bundle exec rails db:test:prepare
#       - name: run rspec
#         run: bundle exec rspec
# #######################################################################

# # nuxt jest ###########################################################
#   nuxt_test:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./front
#     steps:
#       - uses: actions/checkout@v1
#       - name: yarn install
#         run:  yarn install
#       - name: run jest
#         run: yarn test
#######################################################################
  ecs_deploy:
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v2
      - name: aws authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}


      - name : ecr login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: build and push
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker-compose build
          docker-compose run front npm install
          docker image tag nurse_app_web $ECR_REGISTRY/api:latest
          docker image tag nurse_app_front $ECR_REGISTRY/front:latest
          docker push $ECR_REGISTRY/api:latest
          docker push $ECR_REGISTRY/front:latest
      
      - name: check
        run: |
          echo "${{ steps.build-image.outputs.image }}"
