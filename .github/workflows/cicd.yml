name: CI-CD
on: [push]
jobs:
# rails rspec #########################################################
  rails_test:
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: ./api
    env:
      RAILS_ENV: test
      DB_HOST: 127.0.0.1
      API_DOMAIN: localhost
    services:
      db:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          BIND-ADDRESS: 0.0.0.0
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2.3.4
      - name: set up ruby
        uses: ruby/setup-ruby@v1.68.0
        with:
          ruby-version: 2.7.1
          bundler-cache: true
      - name: cache node modules
        uses: actions/cache@v2.1.4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: bundle install
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3 --path vendor/bundle
      - name: yarn install
        run:  yarn install --check-files
      - name: migrate db
        run: |
          bundle exec rails db:create
          bundle exec rails db:test:prepare
      - name: run rspec
        run: bundle exec rspec
#######################################################################

# nuxt jest ###########################################################
  nuxt_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    steps:
      - uses: actions/checkout@v1
      - name: yarn install
        run:  yarn install
      - name: run jest
        run: yarn test
#######################################################################

# ecs deploy ##########################################################
  ecs_deploy:
    runs-on: ubuntu-latest
    needs: [rails_test, nuxt_test]
    steps:
      - uses: actions/checkout@v2
      - name: aws authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}


      - name : ecr login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: build and push
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker-compose build
          docker image tag nurse_app_web $ECR_REGISTRY/api:latest
          docker image tag nurse_app_front $ECR_REGISTRY/front:latest
          docker push $ECR_REGISTRY/api:latest
          docker push $ECR_REGISTRY/front:latest
        
      - name: sleep
        run: sleep 10

      - name: update service
        run: |
          aws ecs update-service --cluster cluster --service api_container --force-new-deployment
          aws ecs update-service --cluster cluster --service front_container --force-new-deployment
      # - name: Fill in the new image ID in the Amazon ECS api task definition
      #   id: api-task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: .github/definitions/api.json
      #     container-name: api_container
      #     image: $ECR_REGISTRY/api:latest
      
      # - name: Fill in the new image ID in the Amazon ECS front task definition
      #   id: front-task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: .github/definitions/front.json
      #     container-name: front_container
      #     image: $ECR_REGISTRY/front:latest


      # - name: deploy ecs api task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.api-task-def.outputs.task-definition }}
      #     sevice: api_container
      #     cluster: cluster
      #     wait-for-service-stability: true

      # - name: deploy ecs front task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.front-task-def.outputs.task-definition }}
      #     sevice: front_container
      #     cluster: cluster
      #     wait-for-service-stability: true

      
#######################################################################